/*
 * Reed Exhibitions Mercury Technical Test
 *
 * Rest API specification for Technical Test
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RegistrationRequest : IEquatable<RegistrationRequest>
    { 
        /// <summary>
        /// Gets or Sets Organisation
        /// </summary>
        [DataMember(Name="organisation")]
        public Organisation Organisation { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [Required]
        [DataMember(Name="person")]
        public Person Person { get; set; }

        /// <summary>
        /// The date when the person registered.
        /// </summary>
        /// <value>The date when the person registered.</value>
        [Required]
        [DataMember(Name="registrationDate")]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationRequest {\n");
            sb.Append("  Organisation: ").Append(Organisation).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistrationRequest)obj);
        }

        /// <summary>
        /// Returns true if RegistrationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistrationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Organisation == other.Organisation ||
                    Organisation != null &&
                    Organisation.Equals(other.Organisation)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.Equals(other.Person)
                ) && 
                (
                    RegistrationDate == other.RegistrationDate ||
                    RegistrationDate != null &&
                    RegistrationDate.Equals(other.RegistrationDate)
                ) && 
                (
                    Locale == other.Locale ||
                    Locale != null &&
                    Locale.Equals(other.Locale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Organisation != null)
                    hashCode = hashCode * 59 + Organisation.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (RegistrationDate != null)
                    hashCode = hashCode * 59 + RegistrationDate.GetHashCode();
                    if (Locale != null)
                    hashCode = hashCode * 59 + Locale.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegistrationRequest left, RegistrationRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistrationRequest left, RegistrationRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
