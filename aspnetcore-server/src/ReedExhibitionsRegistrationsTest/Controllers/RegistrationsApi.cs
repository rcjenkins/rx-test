/*
 * Reed Exhibitions Mercury Technical Test
 *
 * Rest API specification for Technical Test
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.IO;
using IO.Swagger.Storage;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RegistrationsApiController : ControllerBase
    {
        /// <summary>
        /// Creates a registration.
        /// </summary>
        /// 

        private readonly IRegistrationStorage _storage;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storage"></param>
        public RegistrationsApiController(Storage.IRegistrationStorage storage)
        {
            _storage = storage;

        }

        /// <param name="registration">The registration request</param>
        /// <param name="xCorrelationid">A unique id used to track the request</param>
        /// <response code="201">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Server Error</response>
        [HttpPost]
        [Route("/api/v1/registrations")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1RegistrationsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(RegistrationResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server Error")]
        public virtual IActionResult ApiV1RegistrationsPost([FromBody] RegistrationRequest registration, [FromHeader] string xCorrelationid)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(RegistrationResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            RegistrationResponse response = _storage.Save(registration);

            return new ObjectResult(response);
        }

        /// <summary>
        /// Returns a Registration record by its ID.
        /// </summary>

        /// <param name="registrationId">The ID of the Registration Record</param>
        /// <param name="xCorrelationid">A unique id used to track the request</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/api/v1/registrations/{registrationId}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1RegistrationsRegistrationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetRegistrationResponse), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server Error")]
        public virtual IActionResult ApiV1RegistrationsRegistrationIdGet([FromRoute][Required] string registrationId, [FromHeader] string xCorrelationid)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetRegistrationResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            try
            {

                GetRegistrationResponse response = _storage.Load(registrationId);
                return new ObjectResult(response);
            }
            catch (RegistrationNotFoundException)
            {
                return StatusCode(404, "Registration '"+registrationId+"' not found");
            }
            catch{
                throw;
            }
            

        }
    }
}
;